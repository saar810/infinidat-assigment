name: deploy-flask-deploy-flask-app

on:
  push:

env:
  REGISTRY_NAME: ghcr.io
  USERNAME: ${{ github.actor }}
  IMAGE_NAME: my-flask-app
  IMAGE_TAG: ${{ github.sha }}
  PYTHON_VERSION: '3.10'

jobs:
  build-and-push-image:
    name: "Build and Push Image"
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false
      - name: Build and Push Docker Image to GHCR
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY_NAME }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
  test-and-lint:
    name: Test and Lint Code
    runs-on: ubuntu-22.04
    needs: build-and-push-image
    container:
      image: ghcr.io/${{ github.actor }}/my-flask-app:${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Lint Code
        run: |
          python -m black .
          python -m flake8 --config ./.linters/.flake8
      - name: Test Code
        run: |
          cd tests; python test_app.py
     
  tag-latest:
    name: Tag latest
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Wait for Docker image to be pushed
        run: sleep 60
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          logout: false
      - name: Tag latest
        run: |
          docker pull ${{ env.REGISTRY_NAME }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          docker tag ${{ env.REGISTRY_NAME }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} ${{ env.REGISTRY_NAME }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY_NAME }}/${{ env.USERNAME }}/${{ env.IMAGE_NAME }}:latest
